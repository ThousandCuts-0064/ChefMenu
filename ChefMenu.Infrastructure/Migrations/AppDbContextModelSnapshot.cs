// <auto-generated />
using System;
using System.Text.Json;
using ChefMenu.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChefMenu.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "measurement_unit", new[] { "count", "grams", "liters" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "system_action_type", new[] { "create", "update", "soft_delete", "hard_delete" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_action_type", new[] { "view", "like", "save", "dislike", "blacklist" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_feedback_status", new[] { "open", "active", "resolved", "closed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_feedback_type", new[] { "feature", "support", "bug" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "cook", "chef", "moderator", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChefMenu.Domain.Features.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<int?>("KitchenwareId")
                        .HasColumnType("integer")
                        .HasColumnName("kitchenware_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_categories_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_categories_deleted_by_id");

                    b.HasIndex("KitchenwareId")
                        .HasDatabaseName("ix_categories_kitchenware_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name"), new[] { "Id" });

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_categories_product_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_categories_updated_by_id");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasCheckConstraint("ck_union", "   (kitchenware_id IS NOT NULL)::int\r\n   + (product_id IS NOT NULL)::int\r\n   = 1");
                        });
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Comments.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("RecipeCollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_collection_id");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("UserFeedbackId")
                        .HasColumnType("integer")
                        .HasColumnName("user_feedback_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_comments_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_comments_deleted_by_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_comments_parent_id");

                    b.HasIndex("RecipeCollectionId")
                        .HasDatabaseName("ix_comments_recipe_collection_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_comments_recipe_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_comments_updated_by_id");

                    b.HasIndex("UserFeedbackId")
                        .HasDatabaseName("ix_comments_user_feedback_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", null, t =>
                        {
                            t.HasCheckConstraint("ck_union", "   (user_id IS NOT NULL)::int\r\n   + (recipe_id IS NOT NULL)::int\r\n   + (recipe_collection_id IS NOT NULL)::int\r\n   + (user_feedback_id IS NOT NULL)::int\r\n   = 1");
                        });
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_keywords");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_keywords_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_keywords_deleted_by_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_keywords_name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name"), new[] { "Id" });

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_keywords_updated_by_id");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.KeywordRecipe", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("integer")
                        .HasColumnName("keyword_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.HasKey("KeywordId", "RecipeId")
                        .HasName("pk_keyword_recipe");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_keyword_recipe_created_by_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_keyword_recipe_recipe_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RecipeId"), new[] { "KeywordId" });

                    b.ToTable("keyword_recipe", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.KeywordRecipeCollection", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("integer")
                        .HasColumnName("keyword_id");

                    b.Property<int>("RecipeCollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_collection_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.HasKey("KeywordId", "RecipeCollectionId")
                        .HasName("pk_keyword_recipe_collection");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_keyword_recipe_collection_created_by_id");

                    b.HasIndex("RecipeCollectionId")
                        .HasDatabaseName("ix_keyword_recipe_collection_recipe_collection_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RecipeCollectionId"), new[] { "KeywordId" });

                    b.ToTable("keyword_recipe_collection", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_kitchenwares");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_kitchenwares_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_kitchenwares_deleted_by_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_kitchenwares_name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name"), new[] { "Id" });

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_kitchenwares_updated_by_id");

                    b.ToTable("kitchenwares", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Kitchenwares.KitchenwareRecipe", b =>
                {
                    b.Property<int>("KitchenwareId")
                        .HasColumnType("integer")
                        .HasColumnName("kitchenware_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.HasKey("KitchenwareId", "RecipeId")
                        .HasName("pk_kitchenware_recipe");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_kitchenware_recipe_created_by_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_kitchenware_recipe_recipe_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RecipeId"), new[] { "KitchenwareId" });

                    b.ToTable("kitchenware_recipe", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_products_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_products_deleted_by_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name"), new[] { "Id" });

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_products_updated_by_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Products.ProductRecipe", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("integer")
                        .HasColumnName("measurement_unit");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ProductId", "RecipeId")
                        .HasName("pk_product_recipe");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_product_recipe_created_by_id");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_product_recipe_recipe_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RecipeId"), new[] { "ProductId" });

                    b.ToTable("product_recipe", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_recipe_collections");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_recipe_collections_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_recipe_collections_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_recipe_collections_updated_by_id");

                    b.HasIndex("Name", "CreatedById")
                        .IsUnique()
                        .HasDatabaseName("ix_recipe_collections_name_created_by_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name", "CreatedById"), new[] { "Id" });

                    b.ToTable("recipe_collections", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Recipes.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<JsonElement>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_recipes_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_recipes_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_recipes_updated_by_id");

                    b.HasIndex("Name", "CreatedById")
                        .IsUnique()
                        .HasDatabaseName("ix_recipes_name_created_by_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name", "CreatedById"), new[] { "Id" });

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Recipes.RecipeRecipeCollection", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<int>("RecipeCollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_collection_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.HasKey("RecipeId", "RecipeCollectionId")
                        .HasName("pk_recipe_recipe_collection");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_recipe_recipe_collection_created_by_id");

                    b.HasIndex("RecipeCollectionId")
                        .HasDatabaseName("ix_recipe_recipe_collection_recipe_collection_id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RecipeCollectionId"), new[] { "RecipeId" });

                    b.ToTable("recipe_recipe_collection", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.SystemActionHistories.SystemActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_name");

                    b.Property<JsonElement>("New")
                        .HasColumnType("jsonb")
                        .HasColumnName("new");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<JsonElement>("Old")
                        .HasColumnType("jsonb")
                        .HasColumnName("old");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_system_action_histories");

                    b.ToTable("system_action_histories", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.SystemConfigs.SystemConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<JsonElement>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Key")
                        .HasName("pk_system_configs");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_system_configs_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_system_configs_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_system_configs_updated_by_id");

                    b.ToTable("system_configs", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.UserActions.UserAction", b =>
                {
                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("ChefId")
                        .HasColumnType("integer")
                        .HasColumnName("chef_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("KitchenwareId")
                        .HasColumnType("integer")
                        .HasColumnName("kitchenware_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("KeywordId")
                        .HasColumnType("integer")
                        .HasColumnName("keyword_id");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<int>("RecipeCollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_collection_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CreatedById", "Type", "ChefId", "ProductId", "KitchenwareId", "CategoryId", "KeywordId", "RecipeId", "RecipeCollectionId", "CommentId")
                        .HasName("pk_user_actions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_user_actions_category_id")
                        .HasFilter("category_id IS NOT NULL");

                    b.HasIndex("ChefId")
                        .HasDatabaseName("ix_user_actions_chef_id")
                        .HasFilter("chef_id IS NOT NULL");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_user_actions_comment_id")
                        .HasFilter("comment_id IS NOT NULL");

                    b.HasIndex("KeywordId")
                        .HasDatabaseName("ix_user_actions_keyword_id")
                        .HasFilter("keyword_id IS NOT NULL");

                    b.HasIndex("KitchenwareId")
                        .HasDatabaseName("ix_user_actions_kitchenware_id")
                        .HasFilter("kitchenware_id IS NOT NULL");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_user_actions_product_id")
                        .HasFilter("product_id IS NOT NULL");

                    b.HasIndex("RecipeCollectionId")
                        .HasDatabaseName("ix_user_actions_recipe_collection_id")
                        .HasFilter("recipe_collection_id IS NOT NULL");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_user_actions_recipe_id")
                        .HasFilter("recipe_id IS NOT NULL");

                    b.ToTable("user_actions", null, t =>
                        {
                            t.HasCheckConstraint("ck_union", "   (chef_id IS NOT NULL)::int\r\n   + (product_id IS NOT NULL)::int\r\n   + (kitchenware_id IS NOT NULL)::int\r\n   + (category_id IS NOT NULL)::int\r\n   + (keyword_id IS NOT NULL)::int\r\n   + (recipe_id IS NOT NULL)::int\r\n   + (recipe_collection_id IS NOT NULL)::int\r\n   + (comment_id IS NOT NULL)::int\r\n   = 1");
                        });
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.UserFeedbacks.UserFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("AsignedToId")
                        .HasColumnType("integer")
                        .HasColumnName("asigned_to_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_user_feedbacks");

                    b.HasIndex("AsignedToId")
                        .HasDatabaseName("ix_user_feedbacks_asigned_to_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_feedbacks_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_user_feedbacks_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_user_feedbacks_updated_by_id");

                    b.ToTable("user_feedbacks", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Email"), new[] { "Id" });

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Username"), new[] { "Id" });

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Categories.Category", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_categories_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", "Kitchenware")
                        .WithMany("Categories")
                        .HasForeignKey("KitchenwareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_kitchenwares_kitchenware_id");

                    b.HasOne("ChefMenu.Domain.Features.Products.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_products_product_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Kitchenware");

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Comments.Comment", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany("CreatedComments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Comments.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_comments_parent_id");

                    b.HasOne("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", "RecipeCollection")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_recipe_collections_recipe_collection_id");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_recipes_recipe_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_users_updated_by_id");

                    b.HasOne("ChefMenu.Domain.Features.UserFeedbacks.UserFeedback", "UserFeedback")
                        .WithMany("Comments")
                        .HasForeignKey("UserFeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_user_feedbacks_user_feedback_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "User")
                        .WithMany("ReceivedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Parent");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeCollection");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("UserFeedback");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.Keyword", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keywords_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_keywords_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_keywords_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.KeywordRecipe", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Keywords.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_keywords_keyword_id");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_recipes_recipe_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Keyword");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Keywords.KeywordRecipeCollection", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_collection_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Keywords.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_collection_keywords_keyword_id");

                    b.HasOne("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", "RecipeCollection")
                        .WithMany()
                        .HasForeignKey("RecipeCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_keyword_recipe_collection_recipe_collections_recipe_collect");

                    b.Navigation("CreatedBy");

                    b.Navigation("Keyword");

                    b.Navigation("RecipeCollection");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kitchenwares_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_kitchenwares_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_kitchenwares_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Kitchenwares.KitchenwareRecipe", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kitchenware_recipe_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", "Kitchenware")
                        .WithMany()
                        .HasForeignKey("KitchenwareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kitchenware_recipe_kitchenwares_kitchenware_id");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kitchenware_recipe_recipes_recipe_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Kitchenware");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Products.Product", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_products_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_products_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Products.ProductRecipe", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_recipe_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_recipe_products_product_id");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany("ProductRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_recipe_recipes_recipe_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany("CreatedRecipeCollections")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_collections_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_recipe_collections_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_recipe_collections_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Recipes.Recipe", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recipes_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_recipes_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_recipes_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Recipes.RecipeRecipeCollection", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_recipe_collection_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", "RecipeCollection")
                        .WithMany()
                        .HasForeignKey("RecipeCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_recipe_collection_recipe_collections_recipe_collecti");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_recipe_collection_recipes_recipe_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeCollection");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.SystemConfigs.SystemConfig", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_system_configs_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_system_configs_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_system_configs_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.UserActions.UserAction", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_categories_category_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "Chef")
                        .WithMany()
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_users_chef_id");

                    b.HasOne("ChefMenu.Domain.Features.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_comments_comment_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Keywords.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_keywords_keyword_id");

                    b.HasOne("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", "Kitchenware")
                        .WithMany()
                        .HasForeignKey("KitchenwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_kitchenwares_kitchenware_id");

                    b.HasOne("ChefMenu.Domain.Features.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_products_product_id");

                    b.HasOne("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", "RecipeCollection")
                        .WithMany()
                        .HasForeignKey("RecipeCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_recipe_collections_recipe_collection_id");

                    b.HasOne("ChefMenu.Domain.Features.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_actions_recipes_recipe_id");

                    b.Navigation("Category");

                    b.Navigation("Chef");

                    b.Navigation("Comment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Keyword");

                    b.Navigation("Kitchenware");

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeCollection");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.UserFeedbacks.UserFeedback", b =>
                {
                    b.HasOne("ChefMenu.Domain.Features.Users.User", "AsignedTo")
                        .WithMany()
                        .HasForeignKey("AsignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_feedbacks_users_asigned_to_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_feedbacks_users_created_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_feedbacks_users_deleted_by_id");

                    b.HasOne("ChefMenu.Domain.Features.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_feedbacks_users_updated_by_id");

                    b.Navigation("AsignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Comments.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Kitchenwares.Kitchenware", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Products.Product", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.RecipeCollections.RecipeCollection", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Recipes.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductRecipes");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.UserFeedbacks.UserFeedback", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ChefMenu.Domain.Features.Users.User", b =>
                {
                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedRecipeCollections");

                    b.Navigation("CreatedRecipes");

                    b.Navigation("ReceivedComments");
                });
#pragma warning restore 612, 618
        }
    }
}
